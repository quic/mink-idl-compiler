struct ObjInStruct {
  uint32[4] p1;
  ITest1 first_obj;
  uint32[4] p2;
  ITest1 should_be_empty;
  uint32[4] p3;
  ITest1 second_obj;
};

struct F1 {
    uint32 a;
};

struct SingleEncapsulated {
    uint32 inner;
};

struct Collection {
  uint64 a;
  uint32 b;
  uint32 c;
  uint64 d;
};

struct F2 {
  uint8 a;
  uint8 b;
};

struct ArrInStruct {
  uint8[2] a;
  F2[2] c;
  uint16 d;
};

const uint32 SUCCESS_FLAG = 0xdead;

interface ITest1 {
  error CUSTOM_1;
  error CUSTOM_ME_ARE_TWO;
  error MISMATCH;

  method test_f1(in uint32 a, out uint32 b);
  method in_struct(in Collection input);
  method out_struct(out Collection output);
  method in_small_struct(in SingleEncapsulated input);
  method out_small_struct(out SingleEncapsulated output);
  method single_out(out uint32 output);
  method single_in(in uint32 input);
  method single_primitive_in(in buffer unused, out buffer unused2, in uint32 input);
  method single_primitive_out(in buffer unused, out buffer unused2, out uint32 output);
  method multiple_primitive(in buffer unused, out buffer unused2, in uint16 input, out uint16 output, in interface unused3, out interface unused4, in uint32 input2, out uint64 output2, out buffer unused5);
  method primitive_plus_struct_in(in SingleEncapsulated encapsulated, in uint32 magic);
  method primitive_plus_struct_out(out SingleEncapsulated encapsulated, out uint32 magic);
  method primitive_array_in_struct(out ArrInStruct input_a, out uint32 input_b);
  method bundled_with_unbundled(in SingleEncapsulated bundled, in uint32 magic, in Collection unbundled);
  method struct_array_in(in Collection[] s_in);
  method struct_array_out(out Collection[] s_out);
  /**
  * This documentation serves the purpose of ensuring codegen doesn't break when documentation exists.
  *
  */
  method well_documented_method(in uint32 foo, out uint32 bar);
  method test_obj_array_in(in ITest1[3] o_in, out uint32 a);
  method test_obj_array_out(out ITest1[3] out, out uint32 a);
  method objects_in_struct(in ObjInStruct input, out ObjInStruct output);
  #[optional]
  method unimplemented(in uint32 foo); // this method should NOT have an implementation and that is OK
};

interface ITest2 {
  error my_custom_error;

  method entrypoint(in ITest1 o);
};
