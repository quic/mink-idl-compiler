COMMENT_VARIANT_DOUBLESLASH = _{ "//" ~ (!NEWLINE ~ ANY)* }
COMMENT_VARIANT_ASTERISK    = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
DOCUMENTATION               = @{ "/**" ~ NEWLINE ~ (!"*/" ~ ANY)* ~ "*/" }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT    = ${ DOCUMENTATION | COMMENT_VARIANT_ASTERISK | COMMENT_VARIANT_DOUBLESLASH }

path    = @{ (!".idl" ~ ANY)+ ~ ".idl" }
include = ${ "include" ~ " "+ ~ "\"" ~ path ~ "\"" }

ident          = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
integer_type   = @{ "u"? ~ "int" ~ ("8" | "16" | "32" | "64") }
float_type     = @{ "float" ~ ("32" | "64") }
primitive_type = @{ (integer_type | float_type) }
value          = @{ ("-"? ~ "0x" ~ ASCII_HEX_DIGIT+ | "-"? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)?) }

array_size      = @{ ASCII_DIGIT+ }
bounded_array   =  { "[" ~ array_size ~ "]" }
unbounded_array =  { "[" ~ "]" }

struct_field = { (primitive_type | ident) ~ bounded_array? ~ ident ~ ";" }
struct       = { "struct " ~ (!"interface" ~ ident) ~ "{" ~ (struct_field)+ ~ "};" }

const = { "const " ~ primitive_type ~ ident ~ "=" ~ value ~ ";" }

param_type =  { ((ident | "interface") ~ bounded_array) | ((primitive_type | !"interface" ~ ident) ~ unbounded_array) | primitive_type | ident | "interface" | "buffer" }
mutability = @{ ("in" | "out") }
param      =  { mutability ~ param_type ~ ident }
function   =  { "method " ~ ident ~ "(" ~ param? ~ ("," ~ param)* ~ ");" }

error     = { "error " ~ ident ~ ";" }
iname     = { ident ~ (":" ~ ident)? }
interface = { "interface " ~ iname ~ "{" ~ (function | const | error)* ~ "};" }

idl = { SOI ~ include* ~ (const | struct | interface)* ~ EOI }
